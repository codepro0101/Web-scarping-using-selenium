import pymysql
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_selection import chi2
from sklearn.metrics import confusion_matrix
import numpy as np
import re
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.stem import WordNetLemmatizer
from sklearn.model_selection import train_test_split
from nltk.tokenize.treebank import TreebankWordDetokenizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
import string
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.model_selection import cross_val_score
import nltk
nltk.download('punkt')
nltk.download('wordnet')


#Database connection

dbcon = pymysql.connect(host='localhost', user='root', password='', database='trending_scrap')

try:
    SQL_Query = pd.read_sql_query("SELECT Category, Description FROM records WHERE Country = 'USA'", dbcon)
    df1 = pd.DataFrame(SQL_Query, columns=['Category', 'Description'])
    print(df1)
    print('The data type of df1 is: ', type(df1))
except:
    print("Error: unable to convert the data")

dbcon.close()

#text preprocessing
description_data = df1["Description"]
#p =description_data.head()
#print(p)

arr = description_data.to_numpy()
#print(arr)

description_lst = []
for elements1 in arr:
    elements = str(elements1)
    #convert text to lowercase
    res1 = elements.lower()


    #Numbers removing
    res2 = re.sub(r'\d+', '', res1)



    #remove punctuation
    translator = str.maketrans('', '', string.punctuation)
    res3 = res2.translate(translator)
    #print(res3)
    #remove whitespace
    #res4 = " ".join(res3.split)
    res4 = res3
    #print(res4)
    #remove default stopwords
    stop_words = set(stopwords.words("english"))
    word_tokens = word_tokenize(res4)
    filtered_text_1 = [word for word in word_tokens if word not in stop_words]
    filtered_text = TreebankWordDetokenizer().detokenize(filtered_text_1)
    #print(filtered_text)
    #stemming
    stemmer = PorterStemmer()
    word_tokens1 = word_tokenize(filtered_text)
    stems1 = [stemmer.stem(word) for word in word_tokens1]
    stems = TreebankWordDetokenizer().detokenize(stems1)

    #print(stems)
    #lemmatization
    lemmatizer = WordNetLemmatizer()
    #lemmatize string
    word_tokens2 = word_tokenize(stems)
    #provide context i.e part of speech
    lemmas = [lemmatizer.lemmatize(word, pos = 'v') for word in word_tokens2]
    stems2 = TreebankWordDetokenizer().detokenize(lemmas)
    description_lst.append(stems2)
#print(description_lst)

df1['TextPre'] = description_lst
#print(df1)

dff = df1[["Category", "TextPre"]]
print(dff)

#encoding categorie as an integer
col = ['Category', 'TextPre']
dff = dff[col]
dff = dff[pd.notnull(dff['TextPre'])]
dff.columns = ['Category', 'TextPre']
dff['Category_id'] = dff['Category'].factorize()[0]
category_id_dff = dff[['Category', 'Category_id']].drop_duplicates().sort_values('Category_id')
category_to_id = dict(category_id_dff.values)
id_to_category = dict(category_id_dff[['Category_id', 'Category']].values)
print(dff.head())


#Number of descriptions in each category
df2 = dff.groupby(["Category"]).TextPre.count().reset_index()
#print(df2)
df3 = df2.rename(columns = {'TextPre': 'Number_of_descriptions'}, inplace = False)
print(df3)
df3.plot(x='Category', y='Number_of_descriptions', kind='bar', legend=False, grid=True, figsize=(8, 5))
plt.title("Number of descriptions per category")
plt.ylabel('# of Occurrences', fontsize=12)
plt.xlabel('category', fontsize=12)
plt.show()

#Model: Bag of words
tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, norm='l2', encoding='UTF-8', ngram_range=(1, 2), stop_words='english')
features = tfidf.fit_transform(dff.TextPre).toarray()
labels = dff.Category_id
print(features.shape)


# Use 'sklearn.feature_selection.chi2' to find the terms that are the most correlated with each of the products
N = 2
for Category, Category_id in sorted(category_to_id.items()):
  features_chi2 = chi2(features, labels == Category_id)
  indices = np.argsort(features_chi2[0])
  feature_names = np.array(tfidf.get_feature_names())[indices]
  unigrams = [v for v in feature_names if len(v.split(' ')) == 1]
  bigrams = [v for v in feature_names if len(v.split(' ')) == 2]
  print("--> '{}':".format(Category))
  print("  . Most Correlated Unigrams are :\n. {}".format('\n. '.join(unigrams[-N:])))
  print("  . Most Correlated Bigrams are :\n. {}".format('\n. '.join(bigrams[-N:])))

# training and test


X_train, X_test, y_train, y_test = train_test_split(df1['TextPre'], df1['Category'], random_state = 0)
count_vect = CountVectorizer()
X_train_counts = count_vect.fit_transform(X_train)
tfidf_transformer = TfidfTransformer()
X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)
clf = MultinomialNB().fit(X_train_tfidf, y_train)


print("-----------------------Test------------------------------")
print(clf.predict(count_vect.transform(["it's a new channel, we really gonna enjoy"])))



models = [
    RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0),
    LinearSVC(),
    MultinomialNB(),
    LogisticRegression(random_state=0),
]

CV = 5
cv_df = pd.DataFrame(index=range(CV * len(models)))
entries = []
for model in models:
    model_name = model.__class__.__name__
    accuracies = cross_val_score(model, features, labels, scoring='accuracy', cv=CV)
    for fold_idx, accuracy in enumerate(accuracies):
        entries.append((model_name, fold_idx, accuracy))

cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])
import seaborn as sns
sns.boxplot(x='model_name', y='accuracy', data=cv_df)
sns.stripplot(x='model_name', y='accuracy', data=cv_df, size=8, jitter=True, edgecolor="gray", linewidth=2)
plt.show()

cv_df.groupby('model_name').accuracy.mean()

model = LinearSVC()
X_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(features, labels, dff.index, test_size=0.30, random_state=0)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
conf_mat = confusion_matrix(y_test, y_pred)
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(conf_mat, annot=True, fmt='d', xticklabels=category_id_dff.Category.values, yticklabels=category_id_dff.Category.values)
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.show()
